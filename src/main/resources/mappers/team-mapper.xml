<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- !namespace : 해당 mapper파일의 고유한 별칭 -->
<mapper namespace="teamMapper">
<!-- ====================== SELECT ====================== -->
	<!-- 카테고리별 단원 모집 리스트 카운트 -->
	<select id="selectRecruitListCount" parameterType="String" resultType="_int">
		SELECT COUNT(*)
		from TEAM t
		WHERE t.APPLICATION ='Y'
		and TEAM_CATEGORY = #{category}
	</select>
	<!-- 단원 모집 리스트 -->
	<select id="selectRecruitList" parameterType="RecruitListQueryStringDto" resultType="RecruitListDto">
		SELECT
			t.TEAM_NO as teamNo,
			t.TEAM_NAME as teamName,
			a.AREA_NAME as activityArea,
			pf.FILE_PATH as filePath,
			pf.CHANGE_NAME as changeName,
			COUNT(tm.MEM_NO) AS teamMemberCount
		FROM
		TEAM t
		LEFT JOIN PROFILE_FILE pf ON (t.TEAM_NO = pf.TEAM_NO)
		LEFT JOIN TEAM_MEMBER tm ON (t.TEAM_NO = tm.TEAM_NO) AND (tm.STATUS = 'Y')
		JOIN AREA a ON (t.ACTIVITY_AREA = a.ACTIVITY_AREA)
		WHERE
			t.STATUS = 'Y'
			AND t.APPLICATION = 'Y'
			AND t.TEAM_CATEGORY = #{category}
			<choose>
				<when test="searchArea != 'all'">
					and t.ACTIVITY_AREA LIKE #{searchArea}
				</when>
				<otherwise>
					and t.ACTIVITY_AREA LIKE '%'
				</otherwise>
			</choose>
		GROUP BY
			t.TEAM_NO,
			t.TEAM_DESCRIPTION,
			a.AREA_NAME,
			pf.FILE_PATH,
			pf.CHANGE_NAME
		ORDER BY
			<choose>
				<when test="filter == 'latest'">
					t.TEAM_ENROLL_DATE DESC;
				</when>
				<otherwise>
					<!-- 추가 정렬 조건 자리 -->
				</otherwise>
			</choose>
	</select>
	<!-- 단원 모집 디테일 페이지 -->
	<select id="selectRecruitDetail" parameterType="_int" resultType="RecruitDetailDto">
		SELECT
			t.TEAM_NO as teamNo,
			t.TEAM_NAME as teamName,
			t.TEAM_CATEGORY as teamCategory,
			COUNT(tm.MEM_NO) AS memberCount,
			a.AREA_NAME as activityArea,
			t.TEAM_DESCRIPTION as teamDescription,
			pf.CHANGE_NAME as teamProfileChangeName,
			ti.CHANGE_NAME AS thumbnailChangeName
		FROM
			TEAM t
		left JOIN PROFILE_FILE pf ON (t.TEAM_NO = pf.TEAM_NO)
		LEFT JOIN TEAM_MEMBER tm ON (t.TEAM_NO = tm.TEAM_NO) AND (tm.STATUS = 'Y')
		LEFT JOIN TEAM_IMG ti ON (t.TEAM_NO = ti.TEAM_NO)
		JOIN AREA a ON (t.ACTIVITY_AREA = a.ACTIVITY_AREA)
		WHERE
			t.TEAM_NO = #{tno}
		GROUP BY
			t.TEAM_NAME,
			t.TEAM_CATEGORY,
<!--			t.ACTIVITY_AREA,-->
			a.AREA_NAME,
			t.TEAM_DESCRIPTION,
			pf.CHANGE_NAME,
			ti.CHANGE_NAME;
	</select>
	<!-- 지역명 반환 -->
	<select id="selectAreaName" parameterType="String" resultType="String">
		select AREA_NAME
		from AREA
		where ACTIVITY_AREA = #{searchArea}
	</select>
	
	<!-- 구단 게시글 인터셉터 -->
	<select id="checkTeamBoard" resultType="String">
		SELECT 'Y'
		FROM TEAM_BOARD TB
		JOIN TEAM_MEMBER TM
		ON TB.TEAM_NO = TM.TEAM_NO
		WHERE TB.BOARD_NO = #{bno}
		  AND TM.MEM_NO = #{memNo};
	</select>
	
	<!-- 게시글 및 댓글 주인 확인 -->
	<select id="checkBoardMember" resultType="Integer">
		SELECT MEM_NO
		FROM TEAM_BOARD
		WHERE BOARD_NO = #{bno}
	</select>
	<!-- 구단 가입 신청 -->
	<insert id="insertRecruit" parameterType="RecruitDto">
		insert into recruit(
			team_no,
			mem_no,
			introduce
		)values(
			#{teamNo},
			#{memNo},
			#{introduce}
		)
	</insert>
	<!-- 구단장 teamMember insert -->
	<insert id="insertTeamMember" parameterType="TeamMember">
		insert into TEAM_MEMBER(
		TEAM_NO,
		MEM_NO
		)values(
			#{teamNo},
			#{memNo}
		)
	</insert>

	<!-- 구단 게시글 갯수 -->
    <select id="selectListCount" resultType="_int">
        SELECT COUNT(*)
        FROM TEAM_BOARD
        WHERE STATUS = 'Y'
        AND TEAM_NO = #{teamNo}
    </select>
    
    <!-- 구단 게시글 검색 갯수 -->
    <select id="searchListCount" resultType="_int">
        SELECT COUNT(*)
        FROM TEAM_BOARD
        WHERE STATUS = 'Y'
        AND TEAM_NO = #{tno}
        AND TYPE = #{category}
		AND TITLE LIKE CONCAT('%', #{keyword}, '%')
    </select>
    
     <!-- 구단 게시글 조회 -->
	 <select id="selectList" parameterType="map" resultType="TeamBoard">
	    SELECT b.BOARD_NO AS boardNo,
	           b.TITLE AS title,
	           m.MEM_NAME AS memName,
	           b.CREATE_DATE AS createDate,
	           b.VIEW AS view,
	           b.TYPE AS type
	    FROM TEAM_BOARD b
	    JOIN MEMBER m ON b.MEM_NO = m.MEM_NO
	    WHERE b.STATUS = 'Y'
	      AND b.TEAM_NO = #{teamNo}
	    ORDER BY b.BOARD_NO DESC
	</select>
	
	<!-- 구단 인원 목록 -->
	<select id="selectMemberList" resultType="TeamMemberDto">
	    SELECT TM.MEM_NO as memNo,
	    	   TM.TEAM_NO as teamNo,
	           TM.MEM_ENROLL_DATE as memEnrollDate,
	           TM.STATUS as status,
	           M.MEM_NAME as memName,
	           M.MEM_BIRTH as memBirth,
	           CASE 
	               WHEN T.TEAM_CATEGORY = 'soccer' THEN C.SOC_POSI
	               WHEN T.TEAM_CATEGORY = 'futsal' THEN C.FOOT_POSI
	               WHEN T.TEAM_CATEGORY = 'baseball' THEN C.BASE_POSI
	               WHEN T.TEAM_CATEGORY = 'basketball' THEN C.BASKET_POSI
	               ELSE NULL
	           END AS position,
	           CASE 
	               WHEN T.TEAM_CATEGORY = 'soccer' THEN C.SOC_ABILITY
	               WHEN T.TEAM_CATEGORY = 'futsal' THEN C.FOOT_ABILITY
	               WHEN T.TEAM_CATEGORY = 'baseball' THEN C.BASE_ABILITY
	               WHEN T.TEAM_CATEGORY = 'basketball' THEN C.BASKET_ABILITY
	               ELSE NULL
	           END AS ability,
	           PF.CHANGE_NAME as changeName
	    FROM TEAM_MEMBER TM
	    JOIN MEMBER M ON TM.MEM_NO = M.MEM_NO
	    JOIN TEAM T ON TM.TEAM_NO = T.TEAM_NO
	    LEFT JOIN CATEGORY C ON TM.MEM_NO = C.MEM_NO
	    LEFT JOIN PROFILE_FILE PF ON TM.MEM_NO = PF.MEM_NO
	    WHERE TM.TEAM_NO = #{teamNo}
	    AND TM.STATUS = 'Y'
	</select>
	
	<!-- 게시글 내용 가져오기 -->
	<select id="detailList" resultType="TeamBoard">
		 SELECT b.TITLE AS title,
	           m.MEM_NAME AS memName,
	           b.CREATE_DATE AS createDate,
	           b.VIEW AS view,
	           b.LIKE_COUNT AS likeCount,
	           b.CONTENT AS content,
	           b.BOARD_NO AS boardNo,
	           b.TYPE AS type,
	           b.TEAM_NO AS teamNo,
	           b.MEM_NO AS memNo,
	           b.MODIFY_DATE AS modifyDate
	    FROM TEAM_BOARD b
	    JOIN MEMBER m ON b.MEM_NO = m.MEM_NO
	    WHERE b.STATUS = 'Y'
	    AND b.BOARD_NO = #{bno}
	</select>
	
	<!-- 댓글 내용 가져오기 -->
	<select id="commentList" resultType="TeamBoardCommentDto">
		SELECT b.COM_NO AS comNo,
			   b.REF_TEAM_BOARD_NO AS refTeamBoardNo,
			   m.MEM_NAME AS memName,
			   b.COM_CREATE_DATE AS comCreateDate,
			   b.COM_MODIFY_DATE AS comModifyDate,
			   b.STATUS AS status,
			   b.COM_PARENT_NO AS comParentNo,
	     	   p.CHANGE_NAME AS changeName,
			   b.COM_CONTENT AS comContent,
			   b.MEM_NO AS memNo
		FROM TEAM_BOARD_COMMENT b
	    JOIN MEMBER m ON b.MEM_NO = m.MEM_NO
		LEFT JOIN PROFILE_FILE p ON b.MEM_NO = p.MEM_NO
	    WHERE REF_TEAM_BOARD_NO = #{bno}
	</select>
	
	<!-- 댓글 수 계산 -->
    <select id="commentCount" resultType="_int">
        SELECT COUNT(*)
        FROM TEAM_BOARD_COMMENT
        WHERE REF_TEAM_BOARD_NO = #{bno}
        AND STATUS = 'Y'
    </select>
    
    <!-- 상세 페이지 좋아요 갯수 -->
	<select id="likeCount" resultType="_int">
		SELECT COUNT(*)
		FROM TEAM_BOARD_LIKE
		WHERE BOARD_NO = #{bno}
		AND STATUS = 'Y'
	</select>
	
	<!-- 파일 다운로드 -->
	<select id="filedownloadLink" resultType="BoardFile">
		SELECT FILE_PATH AS filePath,
			   CHANGE_NAME AS changeName
		FROM BOARD_FILE
		WHERE REF_TEAM_BOARD_NO = #{bno}
	</select>
	
	<!-- 좋아요 상태 확인 -->
	<select id="boardIsLike" resultType="BoardLike">
		SELECT
		STATUS as status
		FROM TEAM_BOARD_LIKE
		WHERE MEM_NO = #{memNo}
		AND BOARD_NO = #{bno}
	</select>
	
	<!-- 구단 수정 페이지 정보 가져오기 -->
	<select id="teamInfo" resultType="TeamInfoDto">
		SELECT 
		    t.TEAM_NO AS teamNo,
		    t.MEM_NO AS memNo,
		    t.TEAM_NAME AS teamName,
		    t.TEAM_DESCRIPTION AS teamDescription,
		    t.TEAM_MAX_PERSON AS teamMaxPerson,
		    t.TEAM_CATEGORY AS teamCategory,
		    t.ACTIVITY_TIME AS activityTime,
		    t.ACTIVITY_AREA AS activityArea,
		    t.STATUS AS status,
		    t.SCORE AS score,
		    t.TEAM_POINT AS teamPoint,
		    t.TEAM_ENROLL_DATE AS teamEnrollDate,
		    t.APPLICATION AS application,
		    ta.MON AS monday,
		    ta.TUES AS tuesday,
		    ta.WEDNES AS wednesday,
		    ta.THURS AS thursday,
		    ta.FRI AS friday,
		    ta.SATUR AS saturday,
		    ta.SUN AS sunday
		FROM TEAM t
		JOIN TEAM_ACTIVITY_DAYS ta ON t.TEAM_NO = ta.TEAM_NO
		WHERE t.TEAM_NO = ${tno};
	</select>
	
	<!-- 구단 수정 게시판 구단 인원 수 계산 -->
	<select id="numOfTeamPerson" resultType="_int">
		SELECT COUNT(*)
		FROM TEAM_MEMBER
		WHERE TEAM_NO = #{tno}
		AND STATUS = 'Y'
	</select>
	
	<!-- 진행중인 투표 -->
	<select id="voting" resultType="TeamVote">
		SELECT VOTE_NO as voteNo,
			   TEAM_NO as teamNo,
			   STATUS as status,
			   VOTE_TITLE as voteTitle,
			   VOTE_ONE as voteOne,
			   VOTE_TWO as voteTwo,
			   VOTE_THREE as voteThree,
			   VOTE_FOUR as voteFour,
			   VOTE_FIVE as voteFive
		FROM TEAM_VOTE
		WHERE TEAM_NO = #{tno}
		AND STATUS = 'N'
	</select>
	
	<!-- 진행완료된 투표 -->
	<select id="voteList" resultType="TeamVoteDetailDto">
		SELECT 
		    VOTE_NO AS voteNo,
		    VOTE_TITLE AS voteTitle,
		    VOTE_CONTENT AS voteContent,
		    SELECT_COUNT AS selectCount
		FROM (
		    SELECT 
		        TV.VOTE_NO,
		        TV.VOTE_TITLE,
		        CASE TVD.CHECK
		            WHEN 1 THEN TV.VOTE_ONE
		            WHEN 2 THEN TV.VOTE_TWO
		            WHEN 3 THEN TV.VOTE_THREE
		            WHEN 4 THEN TV.VOTE_FOUR
		            WHEN 5 THEN TV.VOTE_FIVE
		        END AS VOTE_CONTENT,
		        COUNT(*) AS SELECT_COUNT
		    FROM 
		        TEAM_VOTE TV
		    JOIN 
		        TEAM_VOTE_DETAIL TVD ON TV.VOTE_NO = TVD.VOTE_NO
		    WHERE 
		        TV.TEAM_NO = #{voteNo}
		        AND TV.STATUS = 'Y'
		        AND TVD.CHECK != 0
		    GROUP BY 
		        TV.VOTE_NO, 
		        TV.VOTE_TITLE,
		        TVD.CHECK,
		        CASE TVD.CHECK
		            WHEN 1 THEN TV.VOTE_ONE
		            WHEN 2 THEN TV.VOTE_TWO
		            WHEN 3 THEN TV.VOTE_THREE
		            WHEN 4 THEN TV.VOTE_FOUR
		            WHEN 5 THEN TV.VOTE_FIVE
		        END
		) AS VOTE_RESULTS
		ORDER BY VOTE_NO ASC;
	</select>
	
	<!-- 구단장 번호 가져오기 -->
	<select id="leaderNo" resultType="_int">
		SELECT MEM_NO as memNo
		FROM TEAM
		WHERE TEAM_NO = #{tno}
	</select>
	
	<!-- 구단 배너 -->
	<select id="teamBanner" resultType="Profile">
		SELECT CHANGE_NAME as changeName
		FROM PROFILE_FILE
		WHERE TEAM_NO = #{tno}
	</select>
	
	<!-- 본인 팀인지 확인 -->
	<select id="checkTeamMember" resultType="_int">
		SELECT COUNT(*)
		FROM TEAM_MEMBER
		WHERE TEAM_NO = #{tno}
		AND MEM_NO = #{memNo}
		AND STATUS = 'Y'
	</select>
	
	<!-- 구단 전적 -->
	<select id="matchInfo" resultType="TeamMatchInfoDto">
		SELECT 
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T1.TEAM_NAME
		        ELSE T2.TEAM_NAME
		    END AS myTeamName,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T2.TEAM_NAME
		        ELSE T1.TEAM_NAME
		    END AS enemyTeamName,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T1.TEAM_POINT
		        ELSE T2.TEAM_POINT
		    END AS myTeamPoint,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T2.TEAM_POINT
		        ELSE T1.TEAM_POINT
		    END AS enemyTeamPoint,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN M.TEAM_A_NO 
		        ELSE M.TEAM_B_NO 
		    END AS myTeamNo,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN M.TEAM_B_NO
		        ELSE M.TEAM_A_NO
		    END AS enemyTeamNo,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN M.SCORE_A
		        ELSE M.SCORE_B
		    END AS myScore,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN M.SCORE_B
		        ELSE M.SCORE_A
		    END AS enemyScore,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN PF1.CHANGE_NAME
		        ELSE PF2.CHANGE_NAME
		    END AS myTeamProfile,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN PF2.CHANGE_NAME
		        ELSE PF1.CHANGE_NAME
		    END AS enemyTeamProfile
		FROM 
		    `MATCH` M
		LEFT JOIN `TEAM` T1 ON M.TEAM_A_NO = T1.TEAM_NO
		LEFT JOIN `TEAM` T2 ON M.TEAM_B_NO = T2.TEAM_NO
		LEFT JOIN `PROFILE_FILE` PF1 ON M.TEAM_A_NO = PF1.TEAM_NO
		LEFT JOIN `PROFILE_FILE` PF2 ON M.TEAM_B_NO = PF2.TEAM_NO
		WHERE 
	     (M.TEAM_A_NO = #{tno} OR M.TEAM_B_NO = #{tno})
		    AND EXISTS (
		        SELECT 1 
		        FROM `MATCH_BEST` MB 
		        WHERE MB.MATCH_NO = M.MATCH_NO
		    );

	</select>
	
	<!-- 예정된 매칭 -->
	<select id="willMatch" resultType="TeamMatchInfoDto">
		SELECT
		    M.MATCH_NO AS matchNo,
		    S.STADIUM_NAME AS stadiumName,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T2.TEAM_NAME
		        ELSE T1.TEAM_NAME
		    END AS enemyTeamName,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN T2.TEAM_POINT
		        ELSE T1.TEAM_POINT
		    END AS enemyTeamPoint,
		    CASE 
		        WHEN M.TEAM_A_NO = #{tno} THEN PF2.CHANGE_NAME
		        ELSE PF1.CHANGE_NAME
		    END AS enemyTeamProfile,
		    MR.STATUS AS status  -- MATCH_REFUND 테이블에서 STATUS 컬럼 추가
		FROM 
		    `MATCH` M
		LEFT JOIN `TEAM` T1 ON M.TEAM_A_NO = T1.TEAM_NO
		LEFT JOIN `TEAM` T2 ON M.TEAM_B_NO = T2.TEAM_NO
		LEFT JOIN `PROFILE_FILE` PF1 ON M.TEAM_A_NO = PF1.TEAM_NO
		LEFT JOIN `PROFILE_FILE` PF2 ON M.TEAM_B_NO = PF2.TEAM_NO
		LEFT JOIN `STADIUM` S ON M.STADIUM_NO = S.STADIUM_NO
		LEFT JOIN `MATCH_REFUND` MR ON M.MATCH_NO = MR.MATCH_NO  -- MATCH_REFUND 테이블 조인
		WHERE 
		    (M.TEAM_A_NO = #{tno} OR M.TEAM_B_NO = #{tno})
		    AND NOT EXISTS (
		        SELECT 1 
		        FROM `MATCH_BEST` MB 
		        WHERE MB.MATCH_NO = M.MATCH_NO
		    );
	</select>
	
	<!-- 구단 전적 수 -->
	<select id="selectMatchCount" resultType="_int">
		SELECT 
		    COUNT(*)
		FROM 
		    `MATCH` M
		WHERE 
		    M.TEAM_A_NO = #{tno} OR M.TEAM_B_NO = #{tno};
	</select>
	
	<!-- 매치 환불 확인 -->
	<select id="checkMatchRefund" resultType="_int">
		SELECT REFUND_NO
		FROM MATCH_REFUND
		WHERE MATCH_NO = #{matchNo}
	</select>
	
	<!-- 메인페이지 구단 랭킹 -->
	<select id="mainRanking" resultType="MyTeamDto">
	    SELECT 
	        TEAM.TEAM_NAME AS teamName, 
	        TEAM.TEAM_POINT AS teamPoint, 
	        PROFILE_FILE.CHANGE_NAME AS teamProfile
	    FROM 
	        TEAM
	    LEFT JOIN 
	        PROFILE_FILE ON TEAM.TEAM_NO = PROFILE_FILE.TEAM_NO
	    <where>
	        <if test="category != null">
	            AND TEAM.TEAM_CATEGORY = #{category}
	        </if>
	    </where>
	    ORDER BY 
	        TEAM.TEAM_POINT DESC
	    LIMIT 6;
	</select>
	<!-- 가입한 구단 category 조회 -->
	<select id="selectEnrollmentInfo" parameterType="_int" resultType="String">
		SELECT t.TEAM_CATEGORY
		FROM TEAM_MEMBER tm
		LEFT JOIN TEAM t ON (tm.TEAM_NO = t.TEAM_NO)
		WHERE tm.MEM_NO = #{memNo}
	</select>
	<!-- 게시글 생성 -->
	<insert id="createBoard" useGeneratedKeys="true" keyProperty="boardNo">
	  	INSERT INTO TEAM_BOARD (
		    TITLE,
		    MEM_NO,
		    CONTENT,
		    TYPE,
		    CREATE_DATE,
		    TEAM_NO
		)
		VALUES (
		    #{title},
		    #{memNo},
		    #{content},
		    #{type},
		    NOW(),
		    #{teamNo}
		)
	  </insert>
	  
	  <!-- 매치 환불 실시 -->
	  <insert id="teamMatchRefund">
	  	INSERT INTO MATCH_REFUND
	  	(
	  		MATCH_NO,
	  		REFUND_CONTENT,
	  		REFUND_DATE
	  		) VALUES (
	  		#{matchNo},
	  		#{refundContent},
	  		NOW()
	  	)
	  </insert>
	  
	  <!-- 게시글 수정 -->
	<update id="updateBoard">
	    UPDATE TEAM_BOARD
	    SET 
	        TITLE = #{title},
	        CONTENT = #{content},
	        TYPE = #{type},
			MODIFY_DATE = NOW()
	    WHERE 
	        BOARD_NO = #{boardNo} <!-- 보통 게시글 ID를 기준으로 수정 -->
	</update>
	
	
	<!-- 게시글 삭제 -->
	<update id="deleteBoard">
	    UPDATE TEAM_BOARD
	    SET STATUS = 'N'
	    WHERE BOARD_NO = #{bno}
	</update>
	
	<!-- 좋아요 변경 -->
	<update id="boardToLike">
		UPDATE TEAM_BOARD_LIKE
		SET STATUS = 'Y'
		WHERE BOARD_NO =
		#{bno}
		AND MEM_NO = #{memNo}
	</update>

	<!-- 좋아요 취소 -->
	<update id="boardToUnLike">
		UPDATE TEAM_BOARD_LIKE
		SET STATUS = 'N'
		WHERE BOARD_NO =
		#{bno}
		AND MEM_NO = #{memNo}
	</update>
	
	<!-- 투표 선택 -->
	<update id="choseVote">
		UPDATE TEAM_VOTE_DETAIL
	    SET `CHECK` = #{voteOption}
	    WHERE VOTE_NO = #{vno} AND MEM_NO = #{memNo};
	</update>
	
	<!-- 투표 종료 -->
	<update id="voteComplete">
		UPDATE TEAM_VOTE
		SET STATUS = 'Y'
		WHERE VOTE_NO = #{vno}
	</update>

	<!-- 팀 전적 update -->
	<update id="updateTeamRecord" parameterType="TeamScore">
		UPDATE TEAM_RECORD
		<set>
			MATCH_COUNT = MATCH_COUNT + 1,
			WIN = WIN +
			<choose>
				<when test="teamANo != null and teamAScore &gt; teamBScore">
					CASE WHEN TEAM_NO = #{teamANo} THEN 1 WHEN TEAM_NO = #{teamBNo} THEN 0 ELSE 0 END
				</when>
				<when test="teamBNo != null and teamBScore &gt; teamAScore">
					CASE WHEN TEAM_NO = #{teamBNo} THEN 1 WHEN TEAM_NO = #{teamANo} THEN 0 ELSE 0 END
				</when>
				<otherwise>0</otherwise>
			</choose>,
			LOSE = LOSE +
			<choose>
				<when test="teamANo != null and teamAScore &lt; teamBScore">
					CASE WHEN TEAM_NO = #{teamANo} THEN 1 WHEN TEAM_NO = #{teamBNo} THEN 0 ELSE 0 END
				</when>
				<when test="teamBNo != null and teamBScore &lt; teamAScore">
					CASE WHEN TEAM_NO = #{teamBNo} THEN 1 WHEN TEAM_NO = #{teamANo} THEN 0 ELSE 0 END
				</when>
				<otherwise>0</otherwise>
			</choose>,
			DRAW = DRAW +
			<choose>
				<when test="teamAScore == teamBScore">
					1
				</when>
				<otherwise>0</otherwise>
			</choose>,
			POINT = POINT +
			<choose>
				<when test="teamANo != null and teamAScore &gt; teamBScore">
					CASE WHEN TEAM_NO = #{teamANo} THEN 3 WHEN TEAM_NO = #{teamBNo} THEN 0 ELSE 0 END
				</when>
				<when test="teamBNo != null and teamBScore &gt; teamAScore">
					CASE WHEN TEAM_NO = #{teamBNo} THEN 3 WHEN TEAM_NO = #{teamANo} THEN 0 ELSE 0 END
				</when>
				<when test="teamAScore == teamBScore">
					1
				</when>
				<otherwise>0</otherwise>
			</choose>
		</set>
		WHERE TEAM_NO IN (#{teamANo}, #{teamBNo});
	</update>


	
	<!-- 입단자 거절 -->
	<delete id="rejectJoin">
		DELETE
		FROM RECRUIT
		WHERE MEM_NO = #{mno}
	</delete>
	
	<!-- 입단자 수락 [reject 테이블 제거] -->
	<delete id="approveJoin">
		DELETE
		FROM RECRUIT
		WHERE MEM_NO = #{mno}
	</delete>
	
	<!-- 입단자 수락 [member 테이블 추가]-->
	<insert id="approveJoinTwo">
		INSERT INTO TEAM_MEMBER (
			    TEAM_NO,
			    MEM_NO,
			    STATUS,
			    MEM_ENROLL_DATE
			)
			VALUES (
			    #{tno},
			    #{mno},
			    'Y',
			    NOW()
			)
	</insert>
	
	<!-- 게시글 검색 -->
	 <select id="searchBoard" parameterType="map" resultType="TeamBoard">
	    SELECT b.BOARD_NO AS boardNo,
	           b.TITLE AS title,
	           m.MEM_NAME AS memName,
	           b.CREATE_DATE AS createDate,
	           b.VIEW AS view,
	           b.TYPE AS type
	    FROM TEAM_BOARD b
	    JOIN MEMBER m ON b.MEM_NO = m.MEM_NO
	    WHERE b.STATUS = 'Y'
	    	AND b.TEAM_NO = #{tno}
	        AND b.TYPE = #{category}
	    	AND b.TITLE LIKE CONCAT('%', #{keyword}, '%')
	    ORDER BY b.BOARD_NO DESC
	</select>
	
	<!-- 댓글 작성 -->
	<insert id="writeReply">
		INSERT INTO TEAM_BOARD_COMMENT (
		    REF_TEAM_BOARD_NO,
		    MEM_NO,
		    COM_CREATE_DATE,
		    STATUS,
		    COM_CONTENT
		)
		VALUES (
		    #{bno},
		    #{memNo},
		    NOW(),
		    'Y',
		    #{comContent}
		)
	</insert>
	
	<!-- 좋아요 삽입 -->
	<insert id="boardInsertLike">
		INSERT INTO TEAM_BOARD_LIKE (BOARD_NO, MEM_NO, STATUS)
		VALUES (#{bno}, #{memNo}, 'Y')
	</insert>
	
	<!-- 대댓글 -->
	<insert id="replyComment">
		INSERT INTO TEAM_BOARD_COMMENT (
			REF_TEAM_BOARD_NO,
			MEM_NO,
			COM_CREATE_DATE,
			STATUS,
			COM_CONTENT,
			COM_PARENT_NO
		)
		VALUES (
			#{boardNo},
			#{memNo},
			NOW(),
			'Y',
			#{pnContent},
			#{comNo}
		)
	</insert>
	
	<!-- 게시글 생성 파일 업로드 -->
	<insert id="saveBoardFile" parameterType="BoardFile">
	INSERT INTO BOARD_FILE (
		REF_TEAM_BOARD_NO,
		ORIGIN_NAME,
		CHANGE_NAME,
		FILE_PATH,
		STATUS
	) VALUES (
		#{refBoardNo},
        #{originName},
        #{changeName},
        #{filePath},
        'Y'
	)
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="deleteReply">
		UPDATE TEAM_BOARD_COMMENT
	    SET 
	        STATUS = 'N'
	    WHERE 
	        COM_NO = #{cno}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="viewAdd">
		UPDATE TEAM_BOARD
	    SET VIEW = VIEW + 1
	    WHERE BOARD_NO = #{bno}
	</update>
	
	<update id="teamOut">
	    UPDATE TEAM_MEMBER
	    SET STATUS = 'N'
	    WHERE TEAM_NO = #{teamNo}
	    AND MEM_NO = #{memNo}
	    AND MEM_NO NOT IN (SELECT MEM_NO FROM TEAM WHERE TEAM_NO = #{teamNo} AND MEM_NO = #{memNo});
	</update>
	
	<!-- 구단 정보 변경 -->
	<update id="modifyTeam">
		UPDATE team
			SET 
			    TEAM_DESCRIPTION = #{teamDescription},
			    TEAM_MAX_PERSON = #{teamMaxPerson},
			    ACTIVITY_TIME = #{activityTime},
			    ACTIVITY_AREA = #{activityArea},
			    APPLICATION = #{application}
			WHERE TEAM_NO = #{teamNo};
	</update>

	<!-- 활동 요일 변경 -->
	<update id="modifyActivityDays">
	    UPDATE TEAM_ACTIVITY_DAYS
	    <set>
	        <if test="monday == 'Y'">
	            MON = #{monday},
	        </if>
	        <if test="monday != 'Y'">
	            MON = 'N',
	        </if>
	        <if test="tuesday == 'Y'">
	            TUES = #{tuesday},
	        </if>
	        <if test="tuesday != 'Y'">
	            TUES = 'N',
	        </if>
	        <if test="wednesday == 'Y'">
	            WEDNES = #{wednesday},
	        </if>
	        <if test="wednesday != 'Y'">
	            WEDNES = 'N',
	        </if>
	        <if test="thursday == 'Y'">
	            THURS = #{thursday},
	        </if>
	        <if test="thursday != 'Y'">
	            THURS = 'N',
	        </if>
	        <if test="friday == 'Y'">
	            FRI = #{friday},
	        </if>
	        <if test="friday != 'Y'">
	            FRI = 'N',
	        </if>
	        <if test="saturday == 'Y'">
	            SATUR = #{saturday},
	        </if>
	        <if test="saturday != 'Y'">
	            SATUR = 'N',
	        </if>
	        <if test="sunday == 'Y'">
	            SUN = #{sunday}
	        </if>
	        <if test="sunday != 'Y'">
	            SUN = 'N'
	        </if>
	    </set>
	    WHERE TEAM_NO = #{teamNo};
	</update>
	
	<!-- 팀 폐쇄 -->
	<update id="teamClosing">
		UPDATE team
			SET
				STATUS = 'N' 
			WHERE TEAM_NO = #{tno};
	</update>

	<insert id="insertTeam" parameterType="Team" useGeneratedKeys="true" keyProperty="teamNo" >
		insert into team(
		MEM_NO,
		TEAM_NAME,
		TEAM_DESCRIPTION,
		TEAM_MAX_PERSON,
		TEAM_CATEGORY,
		ACTIVITY_TIME,
		ACTIVITY_AREA
		) values(
		#{memNo},
		#{teamName},
		#{teamDescription},
		#{teamMaxPerson},
		#{teamCategory},
		#{activityTime},
		#{activityArea}
		)
	</insert>
	<insert id="insertTeamRecord" parameterType="_int">
		insert into TEAM_RECORD(
		TEAM_NO
		)VALUES(
		#{teamNo}
		)
	</insert>
	<insert id="insertActivityDays" parameterType="TeamActivityDays">
		insert into TEAM_ACTIVITY_DAYS(
		<trim suffixOverrides=",">
			TEAM_NO,
			<if test="monday == 'Y'">
				MON,
			</if>
			<if test="tuesday == 'Y'">
				TUES,
			</if>
			<if test="wednesday == 'Y'">
				WEDNES,
			</if>
			<if test="thursday == 'Y'">
				THURS,
			</if>
			<if test="friday == 'Y'">
				FRI,
			</if>
			<if test="saturday == 'Y'">
				SATUR,
			</if>
			<if test="sunday == 'Y'">
				SUN,
			</if>
		</trim>
	
		)values(
		<trim suffixOverrides=",">
			#{teamNo},
			<if test="monday == 'Y'">
				#{monday},
			</if>
			<if test="tuesday == 'Y'">
				#{tuesday},
			</if>
			<if test="wednesday == 'Y'">
				#{wednesday},
			</if>
			<if test="thursday == 'Y'">
				#{thursday},
			</if>
			<if test="friday == 'Y'">
				#{friday},
			</if>
			<if test="saturday == 'Y'">
				#{saturday},
			</if>
			<if test="sunday == 'Y'">
				#{sunday}
			</if>
		</trim>
		)
	</insert>
	
	<!-- 투표 생성 -->
	<insert id="insertVote" useGeneratedKeys="true" keyProperty="voteNo">
		INSERT INTO `TEAM_VOTE` (`TEAM_NO`, `STATUS`, `VOTE_TITLE`, `VOTE_ONE`, `VOTE_TWO`, `VOTE_THREE`, `VOTE_FOUR`, `VOTE_FIVE`)
		SELECT #{teamNo}, 'N', #{voteTitle}, #{voteOne}, #{voteTwo}, #{voteThree}, #{voteFour}, #{voteFive}
		FROM DUAL
		WHERE NOT EXISTS (
		    SELECT 1
		    FROM `TEAM_VOTE`
		    WHERE `TEAM_NO` = #{teamNo} AND `STATUS` = 'N'
		);
	</insert>
	
	<!-- 투표 생성 (Detail) -->
	<insert id="insertVoteDetail">
		INSERT INTO `TEAM_VOTE_DETAIL` (`VOTE_NO`, `MEM_NO`, `CHECK`)
		SELECT
		    TV.VOTE_NO,
		    TM.MEM_NO,
		    0
		FROM
		    TEAM_MEMBER TM
		JOIN
		    TEAM_VOTE TV
		ON
		    TM.TEAM_NO = TV.TEAM_NO
		WHERE
		    TV.VOTE_NO = #{voteNo};
	</insert>

</mapper>